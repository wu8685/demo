// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	hello.proto

It has these top-level messages:
	Person
	Result
	Empty
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Person struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age  int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto1.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type Result struct {
	Succ    bool   `protobuf:"varint,1,opt,name=succ" json:"succ,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto1.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetSucc() bool {
	if m != nil {
		return m.Succ
	}
	return false
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto1.RegisterType((*Person)(nil), "proto.Person")
	proto1.RegisterType((*Result)(nil), "proto.Result")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PersonManager service

type PersonManagerClient interface {
	// type 1: A simple RPC where the client sends a request to the server using the stub
	// and waits for a response to come back, just like a normal function call.
	FindPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Result, error)
	// type 2: A server-side streaming RPC where the client sends a request to the server
	// and gets a stream to read a sequence of messages back. The client reads from the returned stream
	// until there are no more messages. As you can see in our example,
	// you specify a server-side streaming method by placing the stream keyword before the response type.
	ListPersons(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PersonManager_ListPersonsClient, error)
	// type 3: A client-side streaming RPC where the client writes a sequence of messages
	// and sends them to the server, again using a provided stream.
	// Once the client has finished writing the messages, it waits for the server to read them all
	// and return its response. You specify a client-side streaming method
	// by placing the stream keyword before the request type.
	RecordPerson(ctx context.Context, opts ...grpc.CallOption) (PersonManager_RecordPersonClient, error)
	// type 4: A bidirectional streaming RPC where both sides send a sequence of messages
	// using a read-write stream. The two streams operate independently,
	// so clients and servers can read and write in whatever order they like: for example,
	// the server could wait to receive all the client messages before writing its responses,
	// or it could alternately read a message then write a message, or some other combination of reads and writes.
	// The order of messages in each stream is preserved. You specify this type of method by placing
	// the stream keyword before both the request and the response.
	Chat(ctx context.Context, opts ...grpc.CallOption) (PersonManager_ChatClient, error)
}

type personManagerClient struct {
	cc *grpc.ClientConn
}

func NewPersonManagerClient(cc *grpc.ClientConn) PersonManagerClient {
	return &personManagerClient{cc}
}

func (c *personManagerClient) FindPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.PersonManager/FindPerson", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personManagerClient) ListPersons(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PersonManager_ListPersonsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PersonManager_serviceDesc.Streams[0], c.cc, "/proto.PersonManager/ListPersons", opts...)
	if err != nil {
		return nil, err
	}
	x := &personManagerListPersonsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonManager_ListPersonsClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type personManagerListPersonsClient struct {
	grpc.ClientStream
}

func (x *personManagerListPersonsClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personManagerClient) RecordPerson(ctx context.Context, opts ...grpc.CallOption) (PersonManager_RecordPersonClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PersonManager_serviceDesc.Streams[1], c.cc, "/proto.PersonManager/RecordPerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &personManagerRecordPersonClient{stream}
	return x, nil
}

type PersonManager_RecordPersonClient interface {
	Send(*Person) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type personManagerRecordPersonClient struct {
	grpc.ClientStream
}

func (x *personManagerRecordPersonClient) Send(m *Person) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personManagerRecordPersonClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personManagerClient) Chat(ctx context.Context, opts ...grpc.CallOption) (PersonManager_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PersonManager_serviceDesc.Streams[2], c.cc, "/proto.PersonManager/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &personManagerChatClient{stream}
	return x, nil
}

type PersonManager_ChatClient interface {
	Send(*Person) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type personManagerChatClient struct {
	grpc.ClientStream
}

func (x *personManagerChatClient) Send(m *Person) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personManagerChatClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PersonManager service

type PersonManagerServer interface {
	// type 1: A simple RPC where the client sends a request to the server using the stub
	// and waits for a response to come back, just like a normal function call.
	FindPerson(context.Context, *Person) (*Result, error)
	// type 2: A server-side streaming RPC where the client sends a request to the server
	// and gets a stream to read a sequence of messages back. The client reads from the returned stream
	// until there are no more messages. As you can see in our example,
	// you specify a server-side streaming method by placing the stream keyword before the response type.
	ListPersons(*Empty, PersonManager_ListPersonsServer) error
	// type 3: A client-side streaming RPC where the client writes a sequence of messages
	// and sends them to the server, again using a provided stream.
	// Once the client has finished writing the messages, it waits for the server to read them all
	// and return its response. You specify a client-side streaming method
	// by placing the stream keyword before the request type.
	RecordPerson(PersonManager_RecordPersonServer) error
	// type 4: A bidirectional streaming RPC where both sides send a sequence of messages
	// using a read-write stream. The two streams operate independently,
	// so clients and servers can read and write in whatever order they like: for example,
	// the server could wait to receive all the client messages before writing its responses,
	// or it could alternately read a message then write a message, or some other combination of reads and writes.
	// The order of messages in each stream is preserved. You specify this type of method by placing
	// the stream keyword before both the request and the response.
	Chat(PersonManager_ChatServer) error
}

func RegisterPersonManagerServer(s *grpc.Server, srv PersonManagerServer) {
	s.RegisterService(&_PersonManager_serviceDesc, srv)
}

func _PersonManager_FindPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonManagerServer).FindPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersonManager/FindPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonManagerServer).FindPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonManager_ListPersons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonManagerServer).ListPersons(m, &personManagerListPersonsServer{stream})
}

type PersonManager_ListPersonsServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type personManagerListPersonsServer struct {
	grpc.ServerStream
}

func (x *personManagerListPersonsServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonManager_RecordPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonManagerServer).RecordPerson(&personManagerRecordPersonServer{stream})
}

type PersonManager_RecordPersonServer interface {
	SendAndClose(*Result) error
	Recv() (*Person, error)
	grpc.ServerStream
}

type personManagerRecordPersonServer struct {
	grpc.ServerStream
}

func (x *personManagerRecordPersonServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personManagerRecordPersonServer) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonManager_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonManagerServer).Chat(&personManagerChatServer{stream})
}

type PersonManager_ChatServer interface {
	Send(*Result) error
	Recv() (*Person, error)
	grpc.ServerStream
}

type personManagerChatServer struct {
	grpc.ServerStream
}

func (x *personManagerChatServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personManagerChatServer) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PersonManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PersonManager",
	HandlerType: (*PersonManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindPerson",
			Handler:    _PersonManager_FindPerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPersons",
			Handler:       _PersonManager_ListPersons_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordPerson",
			Handler:       _PersonManager_RecordPerson_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _PersonManager_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}

func init() { proto1.RegisterFile("hello.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8e, 0xc1, 0x4a, 0xc5, 0x30,
	0x10, 0x45, 0x8d, 0xbe, 0xf6, 0xf9, 0xa6, 0x2d, 0xc8, 0xac, 0x8a, 0xab, 0x92, 0x55, 0x11, 0x09,
	0x45, 0xc1, 0x1f, 0x10, 0x5d, 0x29, 0x48, 0xfe, 0x20, 0xd6, 0xa1, 0x2d, 0xb4, 0x49, 0x49, 0xd2,
	0x85, 0xdf, 0xe8, 0x4f, 0x49, 0x93, 0x76, 0xe5, 0xc2, 0xb7, 0xca, 0xbd, 0x99, 0x33, 0x73, 0x2f,
	0x64, 0x3d, 0x8d, 0xa3, 0x11, 0xb3, 0x35, 0xde, 0x60, 0x12, 0x1e, 0x2e, 0x20, 0xfd, 0x20, 0xeb,
	0x8c, 0x46, 0x84, 0x83, 0x56, 0x13, 0x95, 0xac, 0x62, 0xf5, 0x49, 0x06, 0x8d, 0x37, 0x70, 0xa5,
	0x3a, 0x2a, 0x2f, 0x2b, 0x56, 0x27, 0x72, 0x95, 0xfc, 0x09, 0x52, 0x49, 0x6e, 0x19, 0xfd, 0xca,
	0xbb, 0xa5, 0x6d, 0x03, 0x7f, 0x2d, 0x83, 0xc6, 0x12, 0x8e, 0x13, 0x39, 0xb7, 0xef, 0x9c, 0xe4,
	0x6e, 0xf9, 0x11, 0x92, 0x97, 0x69, 0xf6, 0xdf, 0x0f, 0x3f, 0x0c, 0x8a, 0x98, 0xf8, 0xae, 0xb4,
	0xea, 0xc8, 0xe2, 0x3d, 0xc0, 0xeb, 0xa0, 0xbf, 0xb6, 0x1a, 0x45, 0xec, 0x27, 0xa2, 0xbd, 0xdd,
	0x6d, 0x0c, 0xe5, 0x17, 0x28, 0x20, 0x7b, 0x1b, 0x9c, 0x8f, 0x63, 0x87, 0xf9, 0x36, 0x0f, 0xc7,
	0xff, 0xd0, 0x0d, 0xc3, 0x06, 0x72, 0x49, 0xad, 0xb1, 0x67, 0xde, 0xaf, 0x19, 0xde, 0xc1, 0xe1,
	0xb9, 0x57, 0xfe, 0x7f, 0xb2, 0x61, 0x9f, 0x69, 0xf8, 0x7b, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x44, 0xb3, 0xe8, 0xb0, 0x5b, 0x01, 0x00, 0x00,
}
