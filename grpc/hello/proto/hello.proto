// manage this file by ourselves

syntax = "proto3";

package proto;

service PersonManager {
    // type 1: A simple RPC where the client sends a request to the server using the stub
    // and waits for a response to come back, just like a normal function call.
    rpc FindPerson(Person) returns (Result) {}

    // type 2: A server-side streaming RPC where the client sends a request to the server
    // and gets a stream to read a sequence of messages back. The client reads from the returned stream
    // until there are no more messages. As you can see in our example,
    // you specify a server-side streaming method by placing the stream keyword before the response type.
    rpc ListPersons(Empty) returns (stream Result) {}

    // type 3: A client-side streaming RPC where the client writes a sequence of messages
    // and sends them to the server, again using a provided stream.
    // Once the client has finished writing the messages, it waits for the server to read them all
    // and return its response. You specify a client-side streaming method
    // by placing the stream keyword before the request type.
    rpc RecordPerson(stream Person) returns (Result) {}

    // type 4: A bidirectional streaming RPC where both sides send a sequence of messages
    // using a read-write stream. The two streams operate independently,
    // so clients and servers can read and write in whatever order they like: for example,
    // the server could wait to receive all the client messages before writing its responses,
    // or it could alternately read a message then write a message, or some other combination of reads and writes.
    // The order of messages in each stream is preserved. You specify this type of method by placing
    // the stream keyword before both the request and the response.
    rpc Chat(stream Person) returns (stream Result) {}
}

message Person {
    string name = 1;
    int32 age = 2;
}

message Result {
    bool succ = 1;
    string message = 2;
}

message Empty {}